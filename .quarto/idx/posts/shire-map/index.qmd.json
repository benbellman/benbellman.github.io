{"title":"Mapping The Shire With `ggplot2`","markdown":{"yaml":{"title":"Mapping The Shire With `ggplot2`","date":"2023-11-04","categories":["ggplot2","gis","data viz","terra"],"image":"thumbnail.png"},"headingText":"Setting up","containsRefs":false,"markdown":"\n\nMy dad is a massive Tolkien fan, and when I stumbled upon [this incredible R blog](https://www.andrewheiss.com/blog/2023/04/26/middle-earth-mapping-sf-r-gis/) by Andrew Heiss showcasing GIS with the `sf` package and Middle Earth data, I knew I needed to make him a custom map for his birthday. I'm not as big a fan as him, but I love the LOTR books and movies, and we share a particular fondness for the Shire: him because of Anglophile agrarian idealism, and me for the rich bounty of geographic world-building that Tolkien shoveled into it.\n\nI know a lot of geographers swear by `tmap`, but my favorite viz tool will always be `ggplot2`, even for mapping. The wealth of companion packages that have been built for it is just so powerful. I also love the ability to hard-code label placements within the coordinate space of the data/chart, something I leaned on heavily for this project.\n\nMy objective was to create a classic Tolkien-style map as a standard 2560-by-1440 pixel desktop background. I wanted it to have that iconic Peter Jackson film style and leverage some 3D effects to highlight topography. I also wanted it to have enough detail to take you on a journey in your imagination but still be a usable background, letting your icons appear effortlessly and feel natural. Skip to the end if you want to see the final product and download to use yourself!\n\n\nFirst things first, I needed the right font for this map to really work. I found [this lovely design for free download](https://fontzone.net/font-details/tolkien) and never looked back. It doesn't support accents, which is just fine by me because text encoding is a private hell, and ASCII helps avoid pain and suffering where possible. Handling custom fonts in R varies by platforms and preferences, but as a current Windows user, I love `extrafont` for importing `.ttf` files. This should work regardless of platform:\n\n``` r\nlibrary(extrafont)\nlibrary(here) #consistent local paths, check it out\n\n# register downloaded Tolkien.tff with extrafont package\n# use your own folder path\nfont_import(paths = here(\"posts\", \"shire-map\", \"data\"))\n\n# import font data into extrafont library within R\nloadfonts()\n\n# fonts loaded this way are availble for future sessions \n# just load extrafont with this verison of R\n```\n\nNow that the font is installed, start a fresh R session to use it. Let's load all the necessary packages and set up a couple handy functions for later:\n\n``` r\nlibrary(tidyverse)\nlibrary(stringi)\nlibrary(sf)\nlibrary(terra)\nlibrary(ggspatial)\nlibrary(ggpattern)\nlibrary(here)\nlibrary(extrafont)\n\n# keep colors consistent\nclr_green <- \"#035711\"\nclr_blue <- \"#9CC2EA\"\nclr_yellow <- \"#fffce3\"\n\n# quick conversion\nmiles_to_meters <- function(x)  x * 1609.344\n\n# ensure consistent spatial data import\nload_me_data <- function(path) { \n  # load shapefile\n  st_read(path, as_tibble = T, options = \"ENCODING=ISO-8859-1\") %>% \n    # drop accents in placenames (font doesn't have them)\n    rename_with(.fn = str_to_lower) %>% \n    mutate(NAME = stri_trans_general(name, \"Latin-ASCII\")) %>% \n    # re-project to consistent coordinate system\n    st_transform(32631)\n}\n```\n\n## Vector data\n\nNow we can load the actual data, created by the Middle Earth Digital Elevation Model team (download the vector data [here](https://github.com/jvangeld/ME-GIS) and the elevation model [here](https://github.com/simonbrewer/MiddleEarthR/tree/master/data/raster). Their original goal was to create detailed maps of all of Middle Earth for table top gaming, which posed some intereting challenges for my smaller scale vision. These are the files I ended up using in the final draft:\n\n\n``` r\n# load middle earth vector files\nme_forests <- load_me_data(here(\"posts\", \"shire-map\", \"data\", \"ME-GIS-master\", \"Forests.shp\"))\nme_rivers <- load_me_data(here(\"posts\", \"shire-map\", \"data\", \"ME-GIS-master\", \"Rivers.shp\"))\nme_towns <- load_me_data(here(\"posts\", \"shire-map\", \"data\", \"ME-GIS-master\", \"Towns.shp\"))\nme_lakes <- load_me_data(here(\"posts\", \"shire-map\", \"data\", \"ME-GIS-master\", \"Lakes.shp\"))\nme_wetlands <- load_me_data(here(\"posts\", \"shire-map\", \"data\", \"ME-GIS-master\", \"Wetlands02.shp\"))\nme_roads <- load_me_data(here(\"posts\", \"shire-map\", \"data\", \"ME-GIS-master\", \"Roads.shp\"))\n```\n\n## Raster data\n\nNow we load and process the elevation raster data. This next part uses the `terra` package, which I finally started using for this project! After loading, I make sure it has the same coordinate system as the vector files.\n\n\n``` r\n# load digital elevation model\nme_dem <- rast(here(\"posts\", \"shire-map\", \"data\", \"DEM\", \"10K.jpg\"))\n\n# match coordinate system to rest of data\ncrs(me_dem) <- \"epsg:32631\"\n```\n\nI found it easier to work with a small subset of elevation data, since I was only interested in mapping the Shire.\n\n``` r\n# grab hobbiton to anchor map extent\nhobbiton <- me_towns %>% \n  filter(name == \"Hobbiton\") %>% \n  mutate(geometry_x = map_dbl(geometry, ~as.numeric(.)[1]),\n         geometry_y = map_dbl(geometry, ~as.numeric(.)[2]))\n\n# create bounding box to select elevation data\nshire_bb <- st_bbox(c(xmin = hobbiton$geometry_x - miles_to_meters(50),\n                      xmax = hobbiton$geometry_x + miles_to_meters(70),\n                      ymax = hobbiton$geometry_y + miles_to_meters(50),\n                      ymin = hobbiton$geometry_y - miles_to_meters(50)),\n                    crs = st_crs(32631))\n                    \n# limit DEM to shire extent\nshire_dem <- crop(me_dem, ext(shire_bb))\n```\n\nAfter some experiments, I realized that the original DEM didn't have a realistic feel when zoomed to the Shire's extent. When translated to three dimensions, the knotted hill country where the Four Farthings meet morphed into towering spires and sheer cliffs, and the flat plains were lumpy and grid-like. To help the landscape resemble natural hill slopes, I applied a kernel density function to calculate weighted averages of elevation, created a smoothed elevation layer.\n\n``` r\n# local weighted mean, Gaussian kernel with 200m radius\nsmooth <- focal(shire_dem, w = focalMat(shire_dem, d = 200, type = \"Gauss\"), fun = \"mean\")\n```\n\n## Shading the hill slopes\n\nI used this data to wrap my head around the `rayshader` page for the first time, but ultimately decided that I could get a nice 3D effect with `ggplot2` and also leverage its sharp text and polygon displays. The `terra` package has built-in tools for computing basic topographic variables for elevation surfaces, and a function to compute shade for a given cell in a DEM. In order to simulate shade values from light sources, we need to compute slope and aspect at each cell with the smoothed elevation.\n\n``` r\n# calculate terrain surface for rayshading the map shadow effect\nsl <- terrain(smooth, \"slope\", unit = \"radians\")\nasp <- terrain(smooth, \"aspect\", unit = \"radians\")\n\n# shade from different sun angles and create composite shade values\nhillmulti <- map(\n  # angles of light source\n  c(270, 15, 60, 330), \n  # lambda function to get shade generated at each cell\n  \\(dir) shade(sl, asp, angle = 45, direction = dir, normalize=TRUE)\n) %>% \n  rast() %>% \n  sum()\n  \n# convert raster to df for ggplot\nhillmultidf <- as.data.frame(hillmulti, xy = TRUE)\n```\n\n## Map annotations\n\nFinally, I hard-coded the map annotations as data frames with annotations built in, and I was meticulous when manually entering and choosing these values. I don't think it's wise to ever trust automatic label placement when mapping or adding text to charts. Remember your audience, medium (physical document, size, colors, etc.), and make purposeful choices on how/where to label your visuals based on those parameters.\n\n``` r\n# settlements\ntowns_anno <- tibble(\n  name = c(\"Hobbiton\", \"Bywater\", \"Bree\", \"Stock\", \"Michel\\nDelving\", \"Scary\", \n           \"Sackville\", \"Longbottom\", \"Waymeet\", \"Needlehole\", \"Nobottle\", \"Overhill\",\n           \"Frogmorton\", \"Bucklebury\", \"Newbury\", \"Tuckburrow\", \"Tookbank\", \"Greenholm\",\n           \"Oatbarton\"),\n  x = c(512700, 526000, 596000, 550500, 479517.2, 545000, \n        513500, 522000, 505000, 495000, 486000, 520000,\n        537000, 561000, 568000, 517000, 513000, 456000,\n        529000),\n  y = c(1047200, 1045500, 1043500, 1039200, 1029736, 1054000, \n        997500, 1001500, 1039000, 1056000, 1047500, 1052300,\n        1041000, 1030500, 1037500, 1030000, 1036000, 1026000,\n        1065068),\n  angle = c(-15, -7, -16, -6, 25, 0, \n            0, 0, 12, -30, 0, 30,\n            12, 0, 0, 20, 45, 0,\n            0)\n)\n\n# rivers\nrivers_anno <- tibble(\n  name = c(\"The Water\", \"River Brandywine\\n(Baranduin)\", \"River Withywindle\", \"River Shirebourn\"),\n  x = c(539000, 542500, 563000, 531000),\n  y = c(1047000, 998000, 1024000, 1011700),\n  angle = c(0, 52, 22, -20)\n)\n\n# woods and marshes\nwoods_anno <- tibble(\n  name = c(\"Woody\\nEnd\", \"The Marish\", \"Overbourn\\nMarshes\", \"Chetwood\", \n           \"Bindbode\\nWood\", \"The Old\\nForest\", \"Green Hills\\nCountry\"),\n  x = c(536000, 546000, 547000, 604000,\n        513000, 567000, 524000),\n  y = c(1028000, 1027000, 1012000, 1052000,\n        1056000, 1015000, 1025500),\n  angle = c(20, 65, 0, 25,\n            15, 0, 0)\n)\n\n# roads\nroads_anno <- tibble(\n  name = c(\"Great East Road\", \"North-South Road\\n(Greenway)\"),\n  x = c(575000, 599500),\n  y = c(1050000, 1062000),\n  angle = c(8, 79)\n)\n\n# hills\nhills_anno <- tibble(\n  name = c(\"The\\nBarrow-downs\", \"The\\nFar\\nDowns\"),\n  x = c(590000, 460000),\n  y = c(1037000, 1036000),\n  angle = c(0, 0)\n)\n\n# combine map features\nanno_df <- bind_rows(list(towns_anno, rivers_anno,woods_anno, roads_anno, hills_anno))\n\n# title\ntitle <- tibble(\n  txt = c(\"The Shire\"),\n  x = c(477000),\n  y = c(1000500)\n)\n\n# cartographer and date\ncaptions <- tibble(\n  txt = c(\"Ben Bellman    August 15, 2023\"),\n  x = c(477000),\n  y = c(993000)\n)\n```\n\n## Final map code\n\nFinally, here's the code that generated the final product. I'm thrilled with how it looks, and think I did a better job than I ever would with any of the point-and-click GIS software products out there. Preserving workflows with code is always worth the effort!\n\n``` r\nggplot() +\n  # start with elevation rayshade\n  geom_raster(data = hillmultidf,\n              aes(x, y, fill = sum),\n              show.legend = FALSE,\n              alpha = 0.5) +\n  scale_fill_distiller(palette = \"Greys\") +\n  # physical geography\n  geom_sf(data = me_forests, linewidth = 0, fill = clr_green, alpha = 0.3) +\n  geom_sf(data = me_rivers, linewidth = 0.75, color = clr_blue) +\n  geom_sf(data = me_lakes, color = clr_blue, fill = clr_blue) +\n  geom_sf_pattern(data = me_wetlands, pattern = \"stripe\", pattern_density = 0.95, pattern_spacing = 0.02,\n                  pattern_color = clr_blue, pattern_fill = clr_green, fill = clr_blue, color = clr_blue, pattern_alpha = 0.25) +\n  # roads\n  geom_sf(data = filter(me_roads, type == \"PRIMARY\"), linewidth = 0.7, color = \"#483C32\", alpha = 0.5) +\n  geom_sf(data = filter(me_roads, type == \"SECONDARY\"), linewidth = 0.4, color = \"#483C32\", alpha = 0.5) +\n  geom_sf(data = filter(me_roads, type == \"TERTIARY\"), linewidth = 0.2, color = \"#483C32\", alpha = 0.5) +\n  # settlements\n  geom_sf(data = filter(me_towns, type == \"Town\"), size = 1.5, pch = 18, color = \"#483C32\") +\n  geom_sf(data = filter(me_towns, type == \"Village\"), size = 0.5, color = \"#483C32\") +\n  # map annotations\n  geom_text(\n    data = anno_df,\n    aes(x = x, y = y, label = name, angle = angle), \n    family = \"Tolkien\", size = 3.5, color = \"black\"\n  ) + \n  # title\n  geom_text(\n    data = title,\n    aes(x = x, y = y, label = txt), \n    family = \"Tolkien\", size = 15\n  ) + \n  # captions\n  geom_text(\n    data = captions,\n    aes(x = x, y = y, label = txt), \n    family = \"Tolkien\", size = 4.5\n  ) + \n  # scale bar\n  annotation_scale(location = \"br\", bar_cols = c(\"black\", \"white\"),\n                   text_family = \"Tolkien\",\n                   unit_category = \"imperial\") +\n  # base map extent on hobbiton\n  coord_sf( # figuring out this extent was trial and error\n    xlim = c(hobbiton$geometry_x - miles_to_meters(38),\n             hobbiton$geometry_x + miles_to_meters(53)),\n    ylim = c(hobbiton$geometry_y - miles_to_meters(32),\n             hobbiton$geometry_y + miles_to_meters(18.625)),\n    crs = 32631\n  ) +\n  # map vibes\n  theme_void() +\n  theme(\n    panel.background = element_rect(fill = clr_yellow, color = NA),\n    legend.position = \"none\"\n  ) -> shire_map\n\n# save the map, specify size by pixels\nggsave(plot = shire_map, filename = here(\"posts\", \"shire-map\", \"shire_map_desktop.png\"), width = 2560, height = 1440, units = \"px\")\n```\n\n![My final map of the Shire, sized as a desktop background. Enjoy!](shire_map_desktop.png)\n","srcMarkdownNoYaml":"\n\nMy dad is a massive Tolkien fan, and when I stumbled upon [this incredible R blog](https://www.andrewheiss.com/blog/2023/04/26/middle-earth-mapping-sf-r-gis/) by Andrew Heiss showcasing GIS with the `sf` package and Middle Earth data, I knew I needed to make him a custom map for his birthday. I'm not as big a fan as him, but I love the LOTR books and movies, and we share a particular fondness for the Shire: him because of Anglophile agrarian idealism, and me for the rich bounty of geographic world-building that Tolkien shoveled into it.\n\nI know a lot of geographers swear by `tmap`, but my favorite viz tool will always be `ggplot2`, even for mapping. The wealth of companion packages that have been built for it is just so powerful. I also love the ability to hard-code label placements within the coordinate space of the data/chart, something I leaned on heavily for this project.\n\nMy objective was to create a classic Tolkien-style map as a standard 2560-by-1440 pixel desktop background. I wanted it to have that iconic Peter Jackson film style and leverage some 3D effects to highlight topography. I also wanted it to have enough detail to take you on a journey in your imagination but still be a usable background, letting your icons appear effortlessly and feel natural. Skip to the end if you want to see the final product and download to use yourself!\n\n## Setting up\n\nFirst things first, I needed the right font for this map to really work. I found [this lovely design for free download](https://fontzone.net/font-details/tolkien) and never looked back. It doesn't support accents, which is just fine by me because text encoding is a private hell, and ASCII helps avoid pain and suffering where possible. Handling custom fonts in R varies by platforms and preferences, but as a current Windows user, I love `extrafont` for importing `.ttf` files. This should work regardless of platform:\n\n``` r\nlibrary(extrafont)\nlibrary(here) #consistent local paths, check it out\n\n# register downloaded Tolkien.tff with extrafont package\n# use your own folder path\nfont_import(paths = here(\"posts\", \"shire-map\", \"data\"))\n\n# import font data into extrafont library within R\nloadfonts()\n\n# fonts loaded this way are availble for future sessions \n# just load extrafont with this verison of R\n```\n\nNow that the font is installed, start a fresh R session to use it. Let's load all the necessary packages and set up a couple handy functions for later:\n\n``` r\nlibrary(tidyverse)\nlibrary(stringi)\nlibrary(sf)\nlibrary(terra)\nlibrary(ggspatial)\nlibrary(ggpattern)\nlibrary(here)\nlibrary(extrafont)\n\n# keep colors consistent\nclr_green <- \"#035711\"\nclr_blue <- \"#9CC2EA\"\nclr_yellow <- \"#fffce3\"\n\n# quick conversion\nmiles_to_meters <- function(x)  x * 1609.344\n\n# ensure consistent spatial data import\nload_me_data <- function(path) { \n  # load shapefile\n  st_read(path, as_tibble = T, options = \"ENCODING=ISO-8859-1\") %>% \n    # drop accents in placenames (font doesn't have them)\n    rename_with(.fn = str_to_lower) %>% \n    mutate(NAME = stri_trans_general(name, \"Latin-ASCII\")) %>% \n    # re-project to consistent coordinate system\n    st_transform(32631)\n}\n```\n\n## Vector data\n\nNow we can load the actual data, created by the Middle Earth Digital Elevation Model team (download the vector data [here](https://github.com/jvangeld/ME-GIS) and the elevation model [here](https://github.com/simonbrewer/MiddleEarthR/tree/master/data/raster). Their original goal was to create detailed maps of all of Middle Earth for table top gaming, which posed some intereting challenges for my smaller scale vision. These are the files I ended up using in the final draft:\n\n\n``` r\n# load middle earth vector files\nme_forests <- load_me_data(here(\"posts\", \"shire-map\", \"data\", \"ME-GIS-master\", \"Forests.shp\"))\nme_rivers <- load_me_data(here(\"posts\", \"shire-map\", \"data\", \"ME-GIS-master\", \"Rivers.shp\"))\nme_towns <- load_me_data(here(\"posts\", \"shire-map\", \"data\", \"ME-GIS-master\", \"Towns.shp\"))\nme_lakes <- load_me_data(here(\"posts\", \"shire-map\", \"data\", \"ME-GIS-master\", \"Lakes.shp\"))\nme_wetlands <- load_me_data(here(\"posts\", \"shire-map\", \"data\", \"ME-GIS-master\", \"Wetlands02.shp\"))\nme_roads <- load_me_data(here(\"posts\", \"shire-map\", \"data\", \"ME-GIS-master\", \"Roads.shp\"))\n```\n\n## Raster data\n\nNow we load and process the elevation raster data. This next part uses the `terra` package, which I finally started using for this project! After loading, I make sure it has the same coordinate system as the vector files.\n\n\n``` r\n# load digital elevation model\nme_dem <- rast(here(\"posts\", \"shire-map\", \"data\", \"DEM\", \"10K.jpg\"))\n\n# match coordinate system to rest of data\ncrs(me_dem) <- \"epsg:32631\"\n```\n\nI found it easier to work with a small subset of elevation data, since I was only interested in mapping the Shire.\n\n``` r\n# grab hobbiton to anchor map extent\nhobbiton <- me_towns %>% \n  filter(name == \"Hobbiton\") %>% \n  mutate(geometry_x = map_dbl(geometry, ~as.numeric(.)[1]),\n         geometry_y = map_dbl(geometry, ~as.numeric(.)[2]))\n\n# create bounding box to select elevation data\nshire_bb <- st_bbox(c(xmin = hobbiton$geometry_x - miles_to_meters(50),\n                      xmax = hobbiton$geometry_x + miles_to_meters(70),\n                      ymax = hobbiton$geometry_y + miles_to_meters(50),\n                      ymin = hobbiton$geometry_y - miles_to_meters(50)),\n                    crs = st_crs(32631))\n                    \n# limit DEM to shire extent\nshire_dem <- crop(me_dem, ext(shire_bb))\n```\n\nAfter some experiments, I realized that the original DEM didn't have a realistic feel when zoomed to the Shire's extent. When translated to three dimensions, the knotted hill country where the Four Farthings meet morphed into towering spires and sheer cliffs, and the flat plains were lumpy and grid-like. To help the landscape resemble natural hill slopes, I applied a kernel density function to calculate weighted averages of elevation, created a smoothed elevation layer.\n\n``` r\n# local weighted mean, Gaussian kernel with 200m radius\nsmooth <- focal(shire_dem, w = focalMat(shire_dem, d = 200, type = \"Gauss\"), fun = \"mean\")\n```\n\n## Shading the hill slopes\n\nI used this data to wrap my head around the `rayshader` page for the first time, but ultimately decided that I could get a nice 3D effect with `ggplot2` and also leverage its sharp text and polygon displays. The `terra` package has built-in tools for computing basic topographic variables for elevation surfaces, and a function to compute shade for a given cell in a DEM. In order to simulate shade values from light sources, we need to compute slope and aspect at each cell with the smoothed elevation.\n\n``` r\n# calculate terrain surface for rayshading the map shadow effect\nsl <- terrain(smooth, \"slope\", unit = \"radians\")\nasp <- terrain(smooth, \"aspect\", unit = \"radians\")\n\n# shade from different sun angles and create composite shade values\nhillmulti <- map(\n  # angles of light source\n  c(270, 15, 60, 330), \n  # lambda function to get shade generated at each cell\n  \\(dir) shade(sl, asp, angle = 45, direction = dir, normalize=TRUE)\n) %>% \n  rast() %>% \n  sum()\n  \n# convert raster to df for ggplot\nhillmultidf <- as.data.frame(hillmulti, xy = TRUE)\n```\n\n## Map annotations\n\nFinally, I hard-coded the map annotations as data frames with annotations built in, and I was meticulous when manually entering and choosing these values. I don't think it's wise to ever trust automatic label placement when mapping or adding text to charts. Remember your audience, medium (physical document, size, colors, etc.), and make purposeful choices on how/where to label your visuals based on those parameters.\n\n``` r\n# settlements\ntowns_anno <- tibble(\n  name = c(\"Hobbiton\", \"Bywater\", \"Bree\", \"Stock\", \"Michel\\nDelving\", \"Scary\", \n           \"Sackville\", \"Longbottom\", \"Waymeet\", \"Needlehole\", \"Nobottle\", \"Overhill\",\n           \"Frogmorton\", \"Bucklebury\", \"Newbury\", \"Tuckburrow\", \"Tookbank\", \"Greenholm\",\n           \"Oatbarton\"),\n  x = c(512700, 526000, 596000, 550500, 479517.2, 545000, \n        513500, 522000, 505000, 495000, 486000, 520000,\n        537000, 561000, 568000, 517000, 513000, 456000,\n        529000),\n  y = c(1047200, 1045500, 1043500, 1039200, 1029736, 1054000, \n        997500, 1001500, 1039000, 1056000, 1047500, 1052300,\n        1041000, 1030500, 1037500, 1030000, 1036000, 1026000,\n        1065068),\n  angle = c(-15, -7, -16, -6, 25, 0, \n            0, 0, 12, -30, 0, 30,\n            12, 0, 0, 20, 45, 0,\n            0)\n)\n\n# rivers\nrivers_anno <- tibble(\n  name = c(\"The Water\", \"River Brandywine\\n(Baranduin)\", \"River Withywindle\", \"River Shirebourn\"),\n  x = c(539000, 542500, 563000, 531000),\n  y = c(1047000, 998000, 1024000, 1011700),\n  angle = c(0, 52, 22, -20)\n)\n\n# woods and marshes\nwoods_anno <- tibble(\n  name = c(\"Woody\\nEnd\", \"The Marish\", \"Overbourn\\nMarshes\", \"Chetwood\", \n           \"Bindbode\\nWood\", \"The Old\\nForest\", \"Green Hills\\nCountry\"),\n  x = c(536000, 546000, 547000, 604000,\n        513000, 567000, 524000),\n  y = c(1028000, 1027000, 1012000, 1052000,\n        1056000, 1015000, 1025500),\n  angle = c(20, 65, 0, 25,\n            15, 0, 0)\n)\n\n# roads\nroads_anno <- tibble(\n  name = c(\"Great East Road\", \"North-South Road\\n(Greenway)\"),\n  x = c(575000, 599500),\n  y = c(1050000, 1062000),\n  angle = c(8, 79)\n)\n\n# hills\nhills_anno <- tibble(\n  name = c(\"The\\nBarrow-downs\", \"The\\nFar\\nDowns\"),\n  x = c(590000, 460000),\n  y = c(1037000, 1036000),\n  angle = c(0, 0)\n)\n\n# combine map features\nanno_df <- bind_rows(list(towns_anno, rivers_anno,woods_anno, roads_anno, hills_anno))\n\n# title\ntitle <- tibble(\n  txt = c(\"The Shire\"),\n  x = c(477000),\n  y = c(1000500)\n)\n\n# cartographer and date\ncaptions <- tibble(\n  txt = c(\"Ben Bellman    August 15, 2023\"),\n  x = c(477000),\n  y = c(993000)\n)\n```\n\n## Final map code\n\nFinally, here's the code that generated the final product. I'm thrilled with how it looks, and think I did a better job than I ever would with any of the point-and-click GIS software products out there. Preserving workflows with code is always worth the effort!\n\n``` r\nggplot() +\n  # start with elevation rayshade\n  geom_raster(data = hillmultidf,\n              aes(x, y, fill = sum),\n              show.legend = FALSE,\n              alpha = 0.5) +\n  scale_fill_distiller(palette = \"Greys\") +\n  # physical geography\n  geom_sf(data = me_forests, linewidth = 0, fill = clr_green, alpha = 0.3) +\n  geom_sf(data = me_rivers, linewidth = 0.75, color = clr_blue) +\n  geom_sf(data = me_lakes, color = clr_blue, fill = clr_blue) +\n  geom_sf_pattern(data = me_wetlands, pattern = \"stripe\", pattern_density = 0.95, pattern_spacing = 0.02,\n                  pattern_color = clr_blue, pattern_fill = clr_green, fill = clr_blue, color = clr_blue, pattern_alpha = 0.25) +\n  # roads\n  geom_sf(data = filter(me_roads, type == \"PRIMARY\"), linewidth = 0.7, color = \"#483C32\", alpha = 0.5) +\n  geom_sf(data = filter(me_roads, type == \"SECONDARY\"), linewidth = 0.4, color = \"#483C32\", alpha = 0.5) +\n  geom_sf(data = filter(me_roads, type == \"TERTIARY\"), linewidth = 0.2, color = \"#483C32\", alpha = 0.5) +\n  # settlements\n  geom_sf(data = filter(me_towns, type == \"Town\"), size = 1.5, pch = 18, color = \"#483C32\") +\n  geom_sf(data = filter(me_towns, type == \"Village\"), size = 0.5, color = \"#483C32\") +\n  # map annotations\n  geom_text(\n    data = anno_df,\n    aes(x = x, y = y, label = name, angle = angle), \n    family = \"Tolkien\", size = 3.5, color = \"black\"\n  ) + \n  # title\n  geom_text(\n    data = title,\n    aes(x = x, y = y, label = txt), \n    family = \"Tolkien\", size = 15\n  ) + \n  # captions\n  geom_text(\n    data = captions,\n    aes(x = x, y = y, label = txt), \n    family = \"Tolkien\", size = 4.5\n  ) + \n  # scale bar\n  annotation_scale(location = \"br\", bar_cols = c(\"black\", \"white\"),\n                   text_family = \"Tolkien\",\n                   unit_category = \"imperial\") +\n  # base map extent on hobbiton\n  coord_sf( # figuring out this extent was trial and error\n    xlim = c(hobbiton$geometry_x - miles_to_meters(38),\n             hobbiton$geometry_x + miles_to_meters(53)),\n    ylim = c(hobbiton$geometry_y - miles_to_meters(32),\n             hobbiton$geometry_y + miles_to_meters(18.625)),\n    crs = 32631\n  ) +\n  # map vibes\n  theme_void() +\n  theme(\n    panel.background = element_rect(fill = clr_yellow, color = NA),\n    legend.position = \"none\"\n  ) -> shire_map\n\n# save the map, specify size by pixels\nggsave(plot = shire_map, filename = here(\"posts\", \"shire-map\", \"shire_map_desktop.png\"), width = 2560, height = 1440, units = \"px\")\n```\n\n![My final map of the Shire, sized as a desktop background. Enjoy!](shire_map_desktop.png)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"visual","theme":"lumen","title":"Mapping The Shire With `ggplot2`","date":"2023-11-04","categories":["ggplot2","gis","data viz","terra"],"image":"thumbnail.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}